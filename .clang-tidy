; ---
; Checks: 
;   bugprone-*,
;   clang-analyzer-core.*,
;   clang-analyzer-cplusplus.*,
;   modernize-*,
;   performance-*,
;   readability-*,
;   cppcoreguidelines-*,
;   misc-*,
  
;   -cppcoreguidelines-pro-type-vararg,
;   -cppcoreguidelines-owning-memory,
;   -modernize-use-auto,
;   -modernize-use-trailing-return-type,
;   -readability-magic-numbers
  

; WarningsAsErrors: ''
; HeaderFilterRegex: '.*'
; AnalyzeTemporaryDtors: false
; FormatStyle: none
; User: ''

; # 如果项目中使用了C++11或更新的标准，可以设置LanguageStandard:
; LanguageStandard: c++20

; # 如果不希望 Clang-Tidy 修复某些警告，使用下方的选项（例如 clang-diagnostic-error）
; # ExtraArgs: ['-Wno-error=clang-diagnostic-error']

; # 如果需要 Clang-Tidy 在特定文件或目录生效，可以设置Include指令
; # Include:
; #   - src/
; #   - include/

; # 如果希望排除特定目录，可以使用Exclude
; # Exclude:
; #   - external/
; #   - build/

; # 你可以使用 FixIncludes 来自动修复一些简单的include问题
; FixIncludes: false

; # 指定要分析的源文件
; # Files: '.*\.(cpp|cc|c\+\+|cxx|c|h|hpp)$'

; # 如果项目使用了自定义的编译器选项，可以使用如下配置
; # ExtraArgs:
; #   - '-std=c++17'
; #   - '-I/path/to/include'

; CheckOptions:
;   # 现代化（Modernize）
;   - key:             modernize-redundant-void-arg
;     value:           'true'  # 检查并移除函数声明中冗余的 void 参数。
;   - key:             modernize-use-bool-literals
;     value:           'true'  # 建议使用布尔字面量 true 和 false 代替整数值 0 和 1。
;   - key:             modernize-use-equals-default
;     value:           'true'  # 建议在默认构造函数、复制构造函数和赋值运算符中使用 = default，以简化代码。
;   - key:             modernize-use-nullptr
;     value:           'true'  # 建议使用 nullptr 代替 NULL 或 0 来表示空指针。
;   - key:             modernize-use-override
;     value:           'true'  # 建议在覆盖基类虚函数时使用 override 关键字，以增加代码的清晰性和安全性。

;   # Google 代码风格（Google）
;   - key:             google-explicit-constructor
;     value:           'true'  # 检查并建议在单参数构造函数中使用 explicit 关键字，以防止隐式转换。
;   - key:             google-readability-casting
;     value:           'true'  # 检查并建议使用 C++ 风格的类型转换（如 static_cast、dynamic_cast、const_cast 和 reinterpret_cast）代替 C 风格的类型转换。

;   # 可读性（Readability）
;   ; - key:             readability-braces-around-statements
;   ;   value:           'true'  # 建议在单行语句周围添加大括号，以提高代码的可读性和一致性。
;   ; - key:             readability-identifier-naming.ClassCase
;   ;   value:           'CamelCase'  # 类名应使用 CamelCase 风格，例如 MyClassName。
;   ; - key:             readability-identifier-naming.StructCase
;   ;   value:           'CamelCase'  # 结构体名应使用 CamelCase 风格，例如 MyStructName。
;   ; - key:             readability-identifier-naming.TypedefCase
;   ;   value:           'CamelCase'  # 类型定义应使用 CamelCase 风格，例如 MyTypeDef。
;   ; - key:             readability-identifier-naming.EnumCase
;   ;   value:           'CamelCase'  # 枚举名应使用 CamelCase 风格，例如 MyEnumName。
;   ; - key:             readability-non-const-parameter
;   ;   value:           'true'  # 检查并标识非 const 参数，以提高代码的可读性和安全性。

;   # CERT 安全编码标准（CERT）
;   - key:             cert-dcl21-cpp
;     value:           'true'  # 检查并标识在头文件中不应包含无命名空间的 using 声明和指令，以防止命名空间污染。

;   # Bug 检测（Bugprone）
;   - key:             bugprone-undelegated-constructor
;     value:           'true'  # 检查并标识未委托的构造函数，以确保构造函数的正确性。
;   - key:             bugprone-macro-parentheses
;     value:           'true'  # 检查并建议在宏定义中使用括号，以防止潜在的错误。
;   - key:             bugprone-macro-repeated-side-effects
;     value:           'true'  # 检查并标识宏中重复的副作用，以防止潜在的错误。
;   - key:             bugprone-forward-declaration-namespace
;     value:           'true'  # 检查并标识命名空间前向声明的潜在问题。
;   - key:             bugprone-bool-pointer-implicit-conversion
;     value:           'true'  # 检查并标识布尔指针的隐式转换，以防止潜在的错误。
;   - key:             bugprone-misplaced-widening-cast
;     value:           'true'  # 检查并标识错误的宽化转换，以防止潜在的错误。

;   # C++ 核心指南（CppCoreGuidelines）
;   - key:             cppcoreguidelines-narrowing-conversions
;     value:           'true'  # 检查并标识可能导致数据丢失的窄化转换。

;   # 杂项（Miscellaneous）
;   - key:             misc-unconventional-assign-operator
;     value:           'true'  # 检查并标识不常见的赋值操作符重载，以确保代码的一致性和可维护性。
;   - key:             misc-unused-parameters
;     value:           'true'  # 检测未使用的参数。
